using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.DB.Structure;
using Autodesk.Revit.DB.Plumbing;
using System;
using System.Linq;

namespace JSE_RevitAddin_MEP_OPENINGS.Services
{
    public class PipeSleevePlacer
    {
        private readonly Document _doc;

        public PipeSleevePlacer(Document doc)
        {
            _doc = doc ?? throw new ArgumentNullException(nameof(doc));
        }

        /// <summary>
        /// Places a round opening (pipe sleeve) at the specified location and aligns it with the pipe direction on the wall face.
        /// </summary>
        public void PlaceSleeve(
            XYZ intersection,
            double pipeDiameter,
            XYZ pipeDirection,
            FamilySymbol sleeveSymbol,
            Wall? linkedWall,
            int pipeElementId = 0)
        {
            // Shared pipe variable to avoid redeclaration
            Pipe intersectingPipe = null;
            DebugLogger.Log($"[PipeSleevePlacer] Called for pipe {pipeElementId} at intersection {intersection}");
            // For compatibility with the log manager (which requires element IDs)
            if (pipeElementId == 0)
            {
                // Try to find the pipe at this intersection
                intersectingPipe = FindIntersectingPipe(intersection);
                if (intersectingPipe != null)
                {
                    pipeElementId = intersectingPipe.Id.IntegerValue;
                    DebugLogger.Log($"[PipeSleevePlacer] Determined pipeElementId {pipeElementId}");
                }
            }

            // Track that we found a pipe-wall intersection
            SleeveLogManager.LogPipeWallIntersection(pipeElementId, intersection, pipeDiameter);

            // Skip if a pipe sleeve of this symbol already exists at this intersection
            double tolerance = UnitUtils.ConvertToInternalUnits(1.0, UnitTypeId.Inches);

            var existingInstances = new FilteredElementCollector(_doc)
                .OfClass(typeof(FamilyInstance))
                .Cast<FamilyInstance>()
                .Where(fi => fi.Symbol.Id == sleeveSymbol.Id)
                .ToList();

            bool exists = existingInstances.Any(fi => 
                fi.GetTransform().Origin.DistanceTo(intersection) < tolerance);
            if (exists)
            {
                DebugLogger.Log($"[PipeSleevePlacer] Skipping pipe {pipeElementId}, existing sleeve detected within {tolerance} units");
                SleeveLogManager.LogPipeSleeveFailure(pipeElementId, "Sleeve already exists at this location");
                return;
            }

            // Calculate wall thickness
            double wallThickness = 0.0;
            if (linkedWall != null)
            {
                var thicknessParam = linkedWall.get_Parameter(BuiltInParameter.WALL_ATTR_WIDTH_PARAM);
                if (thicknessParam != null)
                {
                    wallThickness = thicknessParam.AsDouble();
                }
                else
                {
                    wallThickness = linkedWall.Width;
                }
            }

            // Compute centered placement point within wall thickness
            XYZ n = linkedWall.Orientation.Normalize();
            double halfThk = wallThickness / 2.0;
            XYZ placePoint = intersection + n.Multiply(-halfThk);
            DebugLogger.Log($"[PipeSleevePlacer] placePoint calculated as {placePoint} (halfThk={halfThk})");

            // Determine a level for placement
            Level level = new FilteredElementCollector(_doc)
                              .OfClass(typeof(Level))
                              .Cast<Level>()
                              .FirstOrDefault();
            if (level == null)
            {
                SleeveLogManager.LogPipeSleeveFailure(pipeElementId, "No level found for placement");
                return;
            }
            // Create pipe sleeve instance under the surrounding transaction
            FamilyInstance instance = _doc.Create.NewFamilyInstance(
                placePoint,
                sleeveSymbol,
                level,
                StructuralType.NonStructural);
            DebugLogger.Log($"[PipeSleevePlacer] NewFamilyInstance created at {placePoint}");
            if (instance == null)
            {
                SleeveLogManager.LogPipeSleeveFailure(pipeElementId, "Failed to create instance");
                return;
            }

            // If no pipe found by initial lookup, search for the closest one by intersection
            if (intersectingPipe == null)
            {
                intersectingPipe = FindIntersectingPipe(intersection);
            }
            
            // Get insulation thickness if we found a pipe
            double insulationThickness = 0.0;
            if (intersectingPipe != null)
            {
                var insulationParam = intersectingPipe.get_Parameter(BuiltInParameter.RBS_PIPE_INSULATION_THICKNESS);
                if (insulationParam != null)
                {
                    insulationThickness = insulationParam.AsDouble();
                }
                
                // Use the actual pipe OD if it differs from passed diameter
                double pipeOD = intersectingPipe.get_Parameter(BuiltInParameter.RBS_PIPE_OUTER_DIAMETER).AsDouble();
                if (Math.Abs(pipeOD - pipeDiameter) > 0.001)
                {
                    pipeDiameter = pipeOD;
                }
            }

            // Determine clearance for pipe sleeve: 25mm if insulation exists else 50mm
            double pipeClrMM = insulationThickness > 0.0 ? 25.0 : 50.0;
            double pipeClr = UnitUtils.ConvertToInternalUnits(pipeClrMM, UnitTypeId.Millimeters);
            
            // Set Diameter parameter including clearances on both sides
            Parameter diaParam = instance.LookupParameter("Diameter");
            if (diaParam != null && !diaParam.IsReadOnly)
            {
                // Calculate the total diameter
                double baseDia = pipeDiameter;
                double insulation = insulationThickness * 2;
                double clearance = pipeClr * 2;
                double totalDia = baseDia + insulation + clearance;
                
                diaParam.Set(totalDia);
            }

            // Set depth and handle rotation 
            Parameter depthParamHack = instance.LookupParameter("Depth");
            if (depthParamHack != null && !depthParamHack.IsReadOnly)
            {
                // Set full depth
                depthParamHack.Set(wallThickness);

                XYZ wallNorm = linkedWall.Orientation.Normalize();
                double absX = Math.Abs(pipeDirection.X);
                double absY = Math.Abs(pipeDirection.Y);

                if (absY > absX)
                {
                    // Pipe runs mostly along Y: rotate about Z
                    double angle = pipeDirection.Y > 0 ? Math.PI/2 : -Math.PI/2;
                    Line rotAxis = Line.CreateBound(placePoint, placePoint + XYZ.BasisZ);
                    try
                    {
                        ElementTransformUtils.RotateElement(_doc, instance.Id, rotAxis, angle);
                    }
                    catch (Exception)
                    {
                        // Ignore rotation errors
                    }
                }
                // No additional shift needed; instance created at wall center
            }

            // Log success (parameters already set)
            double finalWidth = instance.LookupParameter("Diameter")?.AsDouble() ?? 0.0;
            XYZ finalPosition = instance.GetTransform().Origin;
            SleeveLogManager.LogPipeSleeveSuccess(pipeElementId, instance.Id.IntegerValue, finalWidth, finalPosition);
            
            // Log the comparison between intersection and sleeve position (helps debug alignment issues)
            if (finalPosition != null)
            {
                double distance = intersection.DistanceTo(finalPosition);
                SleeveLogManager.LogDebug($"Pipe {pipeElementId} - Intersection vs Sleeve position distance: {UnitUtils.ConvertFromInternalUnits(distance, UnitTypeId.Millimeters):.1f}mm");
                SleeveLogManager.LogDebug($"  - Intersection: [{intersection.X:F3}, {intersection.Y:F3}, {intersection.Z:F3}]");
                SleeveLogManager.LogDebug($"  - Sleeve pos: [{finalPosition.X:F3}, {finalPosition.Y:F3}, {finalPosition.Z:F3}]");
            }
        }
        
        /// <summary>
        /// Find the pipe that most closely intersects with the given point
        /// </summary>
        private Pipe FindIntersectingPipe(XYZ intersection)
        {
            Pipe result = null;
            double minDistance = double.MaxValue;
            
            var pipeCollector = new FilteredElementCollector(_doc)
                .OfClass(typeof(Pipe))
                .WhereElementIsNotElementType()
                .Cast<Pipe>();
            
            foreach (Pipe pipe in pipeCollector)
            {
                // Get location curve
                LocationCurve locCurve = pipe.Location as LocationCurve;
                if (locCurve == null)
                    continue;
```
