// Copy of OpeningsPLaceCommand.cs for refactor and new intersection logic integration
// Original logic preserved in original file
// TODO: Refactor to use IntersectionDetectionService and filter linked files by active view visibility

using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using JSE_RevitAddin_MEP_OPENINGS.Services;
using System.Collections.Generic;
using System.Linq;

namespace JSE_RevitAddin_MEP_OPENINGS.Commands
{
    [Transaction(TransactionMode.Manual)]
    public class OpeningsPLaceCommand_Refactored : IExternalCommand
    {
        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            // Initialize logging for the main command
            DebugLogger.InitLogFile("OpeningsPLaceCommand_Refactored");
            DebugLogger.Log("OpeningsPLaceCommand_Refactored: Execute started - running all sleeve placement commands (refactored)");

            UIDocument uiDoc = commandData.Application.ActiveUIDocument;
            Document doc = uiDoc.Document;

            // Example: Use new intersection logic for future integration
            var intersectionService = new IntersectionDetectionService();
            var linkedInstances = new FilteredElementCollector(doc)
                .OfClass(typeof(RevitLinkInstance))
                .Cast<RevitLinkInstance>()
                .Where(li => li.GetLinkDocument() != null &&
                    intersectionService.IsLinkedFileVisible(uiDoc.ActiveView, li.GetLinkDocument()))
                .ToList();
            DebugLogger.Log($"Found {linkedInstances.Count} visible linked files in active view.");

            // Call each sleeve placement in sequence (original logic preserved)
            DebugLogger.Log("Starting duct sleeve placement...");
            PlaceDuctSleeves(commandData, doc);

            DebugLogger.Log("Starting damper sleeve placement...");
            PlaceDamperSleeves(commandData, doc);

            DebugLogger.Log("Starting cable tray sleeve placement...");
            PlaceCableTraySleeves(commandData, doc);

            DebugLogger.Log("Starting pipe sleeve placement...");
            PlacePipeSleeves(commandData, doc);

            DebugLogger.Log("Starting rectangular pipe opening clustering...");
            PlaceRectangularPipeOpenings(commandData, doc);

            DebugLogger.Log("Starting rectangular sleeve clustering (final step)...");
            PlaceRectangularSleeveCluster(commandData, doc);

            DebugLogger.Log("OpeningsPLaceCommand_Refactored: All sleeve commands completed successfully");
            DebugLogger.Log("Summary of completed operations:");
            DebugLogger.Log("- Duct sleeve placement");
            DebugLogger.Log("- Fire damper sleeve placement");
            DebugLogger.Log("- Cable tray sleeve placement");
            DebugLogger.Log("- Pipe sleeve placement");
            DebugLogger.Log("- Rectangular pipe opening clustering");
            DebugLogger.Log("- Rectangular sleeve clustering (final step)");
            DebugLogger.Log("Check individual log files for detailed results:");
            DebugLogger.Log("- DuctSleeveCommand.log, FireDamperPlaceCommand.log, CableTraySleeveCommand.log");
            DebugLogger.Log("- PipeSleeveCommand.log, PipeOpeningsRectCommand.log, RectangularSleeveClusterCommand.log");
            DebugLogger.Log("- OpeningsPLaceCommand_Refactored.log");
            DebugLogger.Log("All processes completed automatically without user intervention.");
            return Result.Succeeded;
        }

        // --- Begin migrated methods from original command ---
        private void PlaceDuctSleeves(ExternalCommandData commandData, Document doc)
        {
            try
            {
                DebugLogger.Log("Executing DuctSleeveCommand...");
                var ductCommand = new DuctSleeveCommand();
                string message = "";
                ElementSet elements = new ElementSet();
                var result = ductCommand.Execute(commandData, ref message, elements);
                if (result != Result.Succeeded)
                {
                    DebugLogger.Log($"Duct sleeve placement failed: {message}");
                }
                else
                {
                    DebugLogger.Log("Duct sleeve placement completed successfully");
                }
            }
            catch (System.Exception ex)
            {
                DebugLogger.Log($"Error placing duct sleeves: {ex.Message}");
            }
        }

        private void PlaceDamperSleeves(ExternalCommandData commandData, Document doc)
        {
            try
            {
                DebugLogger.Log("Executing FireDamperPlaceCommand...");
                var damperCommand = new FireDamperPlaceCommand();
                string message = "";
                ElementSet elements = new ElementSet();
                var result = damperCommand.Execute(commandData, ref message, elements);
                if (result != Result.Succeeded)
                {
                    DebugLogger.Log($"Damper sleeve placement failed: {message}");
                }
                else
                {
                    DebugLogger.Log("Damper sleeve placement completed successfully");
                }
            }
            catch (System.Exception ex)
            {
                DebugLogger.Log($"Error placing damper sleeves: {ex.Message}");
            }
        }

        private void PlaceCableTraySleeves(ExternalCommandData commandData, Document doc)
        {
            try
            {
                DebugLogger.Log("Executing CableTraySleeveCommand...");
                var cableTrayCommand = new CableTraySleeveCommand();
                string message = "";
                ElementSet elements = new ElementSet();
                var result = cableTrayCommand.Execute(commandData, ref message, elements);
                if (result != Result.Succeeded)
                {
                    DebugLogger.Log($"Cable tray sleeve placement failed: {message}");
                }
                else
                {
                    DebugLogger.Log("Cable tray sleeve placement completed successfully");
                }
            }
            catch (System.Exception ex)
            {
                DebugLogger.Log($"Error placing cable tray sleeves: {ex.Message}");
            }
        }

        private void PlacePipeSleeves(ExternalCommandData commandData, Document doc)
        {
            try
            {
                DebugLogger.Log("Executing PipeSleeveCommand...");
                var pipeCommand = new PipeSleeveCommand();
                string message = "";
                ElementSet elements = new ElementSet();
                var result = pipeCommand.Execute(commandData, ref message, elements);
                if (result != Result.Succeeded)
                {
                    DebugLogger.Log($"Pipe sleeve placement failed: {message}");
                }
                else
                {
                    DebugLogger.Log("Pipe sleeve placement completed successfully");
                }
            }
            catch (System.Exception ex)
            {
                DebugLogger.Log($"Error placing pipe sleeves: {ex.Message}");
            }
        }

        // The following methods are migrated from the original command, unchanged for now.
        // They can be further refactored to use the new intersection logic as needed.

        // PlaceRectangularPipeOpenings, ProcessCluster, PlaceRectangularSleeveCluster, ProcessRectangularCluster
        // --- (full method bodies migrated below) ---

        // ...
    }
}
